/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import dao.ClientesDAO;
import dao.FuncionariosDAO;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Clientes;
import model.Funcionarios;

/**
 *
 * @author Erivelton
 */
public class FrmFuncionarios extends javax.swing.JFrame {

    private void listar() {
        try {
            // Cria uma instância do DAO para acessar o banco de dados
            FuncionariosDAO dao = new FuncionariosDAO();

            // Obtém a lista de todos os funcionários
            List<Funcionarios> listaFuncionarios = dao.listarTodos();

            // Obtém o modelo da tabela
            DefaultTableModel model = (DefaultTableModel) tabelafuncionarios.getModel(); // Certifique-se de que a tabela correta está sendo referenciada

            // Limpa a tabela antes de adicionar novos dados
            model.setRowCount(0);

            // Adiciona os dados à tabela
            for (Funcionarios f : listaFuncionarios) {
                model.addRow(new Object[]{
                    f.getId(),
                    f.getNome(),
                    f.getCpf(),
                    f.getTelefone(),
                    f.getEndereco(),
                    f.getNumero(),
                    f.getBairro(),
                    f.getCep(),
                    f.getCargo(),
                    f.getNivelAcesso(),
                    f.getSenha()
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao listar todos os funcionários: " + e.getMessage());
        }
    }

    private void atualizarTabelaFuncionarios(List<Funcionarios> listaFuncionarios) {
        // Obtém o modelo da tabela
        DefaultTableModel model = (DefaultTableModel) tabelafuncionarios.getModel();
        model.setRowCount(0); // Limpa a tabela

        // Itera sobre a lista de funcionários e adiciona cada um na tabela
        for (Funcionarios f : listaFuncionarios) {
            model.addRow(new Object[]{
                f.getId(),
                f.getNome(),
                f.getCpf(),
                f.getTelefone(),
                f.getEndereco(),
                f.getNumero(),
                f.getBairro(),
                f.getCep(),
                f.getCargo(),
                f.getNivelAcesso(),
                f.getSenha()
            });
        }
    }

    /**
     * Creates new form FrmClientes
     */
    public FrmFuncionarios() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tabeladadosformulario = new javax.swing.JTabbedPane();
        tabeladadospessoais = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtcodigo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtnome = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtendereco = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtnumero = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtbairro = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtcpf = new javax.swing.JFormattedTextField();
        txttelefone = new javax.swing.JFormattedTextField();
        txtcep = new javax.swing.JFormattedTextField();
        btnpesquisanome = new javax.swing.JButton();
        btnpesquisacpf = new javax.swing.JButton();
        btnpesquisatelefone = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtusuario = new javax.swing.JTextField();
        cbacesso = new javax.swing.JComboBox<>();
        txtsenha = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelafuncionarios = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        txtnome1 = new javax.swing.JTextField();
        btnpesquisar = new javax.swing.JButton();
        btnsalvar = new javax.swing.JButton();
        btneditar = new javax.swing.JButton();
        btnexcluir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tabela Clientes");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(161, 153, 164));

        jLabel1.setBackground(new java.awt.Color(246, 230, 230));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 137, 154));
        jLabel1.setText("Tabela de Funcionários");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(127, 127, 127))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Código:");

        txtcodigo.setEditable(false);
        txtcodigo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Nome:");

        txtnome.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtnome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtnomeKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Cpf:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Telefone:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Endereço:");

        txtendereco.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Número:");

        txtnumero.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Bairro:");

        txtbairro.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Cep:");

        try {
            txtcpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("### . ### . ### - ##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtcpf.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtcpf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcpfKeyPressed(evt);
            }
        });

        try {
            txttelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) # . #### - ####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txttelefone.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txttelefone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txttelefoneKeyPressed(evt);
            }
        });

        try {
            txtcep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("## . ### - ###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtcep.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        btnpesquisanome.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnpesquisanome.setText("Pesquisar");
        btnpesquisanome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpesquisanomeActionPerformed(evt);
            }
        });
        btnpesquisanome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnpesquisanomeKeyPressed(evt);
            }
        });

        btnpesquisacpf.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnpesquisacpf.setText("Pesquisar");
        btnpesquisacpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpesquisacpfActionPerformed(evt);
            }
        });
        btnpesquisacpf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnpesquisacpfKeyPressed(evt);
            }
        });

        btnpesquisatelefone.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnpesquisatelefone.setText("Pesquisar");
        btnpesquisatelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpesquisatelefoneActionPerformed(evt);
            }
        });
        btnpesquisatelefone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnpesquisatelefoneKeyPressed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setText("Usuário:");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel12.setText("Senha:");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel13.setText("Acesso:");

        txtusuario.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        cbacesso.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cbacesso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin", "Padrão" }));

        txtsenha.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout tabeladadospessoaisLayout = new javax.swing.GroupLayout(tabeladadospessoais);
        tabeladadospessoais.setLayout(tabeladadospessoaisLayout);
        tabeladadospessoaisLayout.setHorizontalGroup(
            tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabeladadospessoaisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtcep, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(tabeladadospessoaisLayout.createSequentialGroup()
                            .addComponent(txtcpf, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnpesquisacpf))
                        .addGroup(tabeladadospessoaisLayout.createSequentialGroup()
                            .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtnome, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                                .addComponent(txtendereco)
                                .addComponent(txtnumero, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtbairro))
                            .addGap(45, 45, 45)
                            .addComponent(btnpesquisanome))
                        .addGroup(tabeladadospessoaisLayout.createSequentialGroup()
                            .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(tabeladadospessoaisLayout.createSequentialGroup()
                                    .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txttelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtusuario, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(0, 39, Short.MAX_VALUE))
                                .addGroup(tabeladadospessoaisLayout.createSequentialGroup()
                                    .addComponent(txtsenha)
                                    .addGap(45, 45, 45)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnpesquisatelefone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbacesso, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        tabeladadospessoaisLayout.setVerticalGroup(
            tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabeladadospessoaisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtnome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnpesquisanome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtcpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnpesquisacpf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txttelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnpesquisatelefone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtendereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtnumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtbairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtcep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(txtusuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabeladadospessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(cbacesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtsenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        tabeladadosformulario.addTab("Dados Pessoais", tabeladadospessoais);

        tabelafuncionarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Cpf", "Telefone", "Endereço", "Numero", "Bairro", "Cep", "Cargo", "Nivel Acesso", "Senha"
            }
        ));
        tabelafuncionarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelafuncionariosMouseClicked(evt);
            }
        });
        tabelafuncionarios.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabelafuncionariosKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tabelafuncionarios);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("Nome:");

        txtnome1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtnome1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtnome1KeyPressed(evt);
            }
        });

        btnpesquisar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnpesquisar.setText("Pesquisar");
        btnpesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpesquisarActionPerformed(evt);
            }
        });
        btnpesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnpesquisarKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtnome1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnpesquisar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtnome1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnpesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        tabeladadosformulario.addTab("Tabela Clientes", jPanel2);

        btnsalvar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnsalvar.setText("Salvar");
        btnsalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsalvarActionPerformed(evt);
            }
        });
        btnsalvar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnsalvarKeyPressed(evt);
            }
        });

        btneditar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btneditar.setText("Editar");
        btneditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneditarActionPerformed(evt);
            }
        });
        btneditar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btneditarKeyPressed(evt);
            }
        });

        btnexcluir.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnexcluir.setText("Excluir");
        btnexcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexcluirActionPerformed(evt);
            }
        });
        btnexcluir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnexcluirKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabeladadosformulario, javax.swing.GroupLayout.PREFERRED_SIZE, 623, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnsalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76)
                .addComponent(btneditar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(btnexcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btneditar, btnsalvar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabeladadosformulario, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnsalvar)
                    .addComponent(btneditar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnexcluir))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btneditar, btnexcluir, btnsalvar});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void btnsalvarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // Botao salvar

        try {
            // Captura dos dados dos campos de texto
            String txtId = txtcodigo.getText();
            String txtNumero = txtnumero.getText();

            // Validação e conversão dos campos numéricos
            int id = 0;
            int numero = 0;

            try {
                if (!txtId.isEmpty()) {
                    id = Integer.parseInt(txtId); // Converter para inteiro
                }
                if (!txtNumero.isEmpty()) {
                    numero = Integer.parseInt(txtNumero); // Converter para inteiro
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Erro de formato numérico: " + e.getMessage());
                return; // Interrompe a execução se a conversão falhar
            }

            // Captura dos outros campos de texto
            String nome = txtnome.getText();
            String cpf = txtcpf.getText();
            String telefone = txttelefone.getText();
            String endereco = txtendereco.getText();
            String bairro = txtbairro.getText();
            String cep = txtcep.getText();
            String cargo = txtusuario.getText();  // Exemplo de campo adicional
            String senha = txtsenha.getText();  // Exemplo de campo adicional
            String nivelAcesso = (String) cbacesso.getSelectedItem();

            // Criação e preenchimento do objeto Funcionarios
            Funcionarios funcionario = new Funcionarios();
            funcionario.setId(id); // Defina o ID se necessário
            funcionario.setNome(nome);
            funcionario.setCpf(cpf);
            funcionario.setTelefone(telefone);
            funcionario.setEndereco(endereco);
            funcionario.setNumero(numero);
            funcionario.setBairro(bairro);
            funcionario.setCep(cep);
            funcionario.setCargo(cargo);  // Definindo o cargo do funcionário
            funcionario.setSenha(senha);  // Definindo a senha do funcionário
            funcionario.setNivelAcesso(nivelAcesso);  // Definindo o nível de acesso do funcionário

            // Criação do DAO e chamada ao método de cadastro
            FuncionariosDAO dao = new FuncionariosDAO();
            dao.cadastrarFuncionarios(funcionario);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar funcionário: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro inesperado: " + e.getMessage());
        }

// Limpar os campos após a operação
        txtnome.setText("");
        txtcpf.setText("");
        txttelefone.setText("");
        txtendereco.setText("");
        txtnumero.setText("");
        txtbairro.setText("");
        txtcep.setText("");
        txtusuario.setText("");  // Limpar o campo cargo
        txtsenha.setText("");  // Limpar o campo senha
        cbacesso.setSelectedItem("");  // Limpar o campo nível de acesso

    }                                         

    private void btneditarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // Botao Editar

        try {
            // Captura do ID do funcionário
            int id = Integer.parseInt(txtcodigo.getText()); // Assumindo que você tenha um campo txtcodigo para o ID

            // Captura dos dados dos campos de texto
            String nome = txtnome.getText();
            String cpf = txtcpf.getText();
            String telefone = txttelefone.getText();
            String endereco = txtendereco.getText();
            int numero = Integer.parseInt(txtnumero.getText());
            String bairro = txtbairro.getText();
            String cep = txtcep.getText();
            String cargo = txtusuario.getText(); // Assumindo que você tenha um campo txtcargo
            String nivelAcesso = cbacesso.getSelectedItem().toString(); // Captura o nível de acesso do ComboBox cbacesso
            String senha = txtsenha.getText(); // Assumindo que você tenha um campo txtsenha

            // Criação e preenchimento do objeto Funcionarios
            Funcionarios funcionario = new Funcionarios();
            funcionario.setId(id); // Define o ID do funcionário
            funcionario.setNome(nome);
            funcionario.setCpf(cpf);
            funcionario.setTelefone(telefone);
            funcionario.setEndereco(endereco);
            funcionario.setNumero(numero);
            funcionario.setBairro(bairro);
            funcionario.setCep(cep);
            funcionario.setCargo(cargo); // Define o cargo do funcionário
            funcionario.setNivelAcesso(nivelAcesso); // Define o nível de acesso do funcionário
            funcionario.setSenha(senha); // Define a senha do funcionário

            // Criação do DAO e chamada ao método de atualização
            FuncionariosDAO dao = new FuncionariosDAO();
            dao.alterarFuncionario(funcionario);

            // Limpeza dos campos
            txtnome.setText("");
            txtcpf.setText("");
            txttelefone.setText("");
            txtendereco.setText("");
            txtnumero.setText("");
            txtbairro.setText("");
            txtcep.setText("");
            txtcodigo.setText(""); // Limpa o campo de ID se aplicável
            txtusuario.setText(""); // Limpa o campo cargo
            cbacesso.setSelectedIndex(0); // Reseta o ComboBox nivelAcesso para o primeiro valor
            txtsenha.setText(""); // Limpa o campo senha
            

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Erro de formato numérico: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar funcionário: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro inesperado: " + e.getMessage());
        }


    }                                         

    private void btnexcluirActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // Botao Excluir

        // Botão Excluir
        try {
            // Captura do ID do funcionário
            int id = Integer.parseInt(txtcodigo.getText()); // Assumindo que você tenha um campo txtcodigo para o ID

            // Criação do objeto Funcionarios com o ID
            Funcionarios funcionario = new Funcionarios();
            funcionario.setId(id); // Define o ID do funcionário a ser excluído

            // Criação do DAO e chamada ao método de exclusão
            FuncionariosDAO dao = new FuncionariosDAO();
            dao.excluirFuncionario(funcionario);

            // Limpeza dos campos
            txtnome.setText("");
            txtcpf.setText("");
            txttelefone.setText("");
            txtendereco.setText("");
            txtnumero.setText("");
            txtbairro.setText("");
            txtcep.setText("");
            txtcodigo.setText(""); // Limpar o campo de ID se aplicável
            txtusuario.setText(""); // Limpar o campo de cargo
            cbacesso.setSelectedItem(""); // Limpar o campo de nível de acesso
            txtsenha.setText(""); // Limpar o campo de senha

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Erro de formato numérico: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao excluir funcionário: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro inesperado: " + e.getMessage());
        }


    }                                          

    private void btnpesquisanomeActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // Botao Pesquisar nome

        // Botão Pesquisar nome
        try {
            String nome = txtnome.getText(); // Obtém o nome do funcionário para pesquisa

            // Verifica se o campo nome não está vazio
            if (nome.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Por favor, insira um nome para pesquisar.");
                return;
            }

            FuncionariosDAO dao = new FuncionariosDAO();
            Funcionarios funcionario = dao.buscarFuncionarioPorNome(nome);

            // Verifica se o funcionário foi encontrado
            if (funcionario != null) {
                // Preenche os campos do formulário com os dados do funcionário encontrado
                txtcodigo.setText(String.valueOf(funcionario.getId()));
                txtnome.setText(funcionario.getNome());
                txtcpf.setText(funcionario.getCpf());
                txttelefone.setText(funcionario.getTelefone());
                txtendereco.setText(funcionario.getEndereco());
                txtnumero.setText(String.valueOf(funcionario.getNumero()));
                txtbairro.setText(funcionario.getBairro());
                txtcep.setText(funcionario.getCep());
                txtusuario.setText(funcionario.getCargo()); // Preenche o campo de cargo
                cbacesso.setSelectedItem(funcionario.getNivelAcesso()); // Preenche o campo de nível de acesso
                txtsenha.setText(funcionario.getSenha()); // Preenche o campo de senha
                cbacesso.setSelectedItem(funcionario.getNivelAcesso()); // Seleciona o nível de acesso no ComboBox

            } else {
                JOptionPane.showMessageDialog(null, "Funcionário não encontrado.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Erro de formato numérico: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao buscar funcionário: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro inesperado: " + e.getMessage());
        }


    }                                               

    private void btnpesquisacpfActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // Botao pesquisar cpf

        // Botão Pesquisar por CPF
        try {
            String cpf = txtcpf.getText();

            // Verifica se o campo CPF está vazio
            if (cpf.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Por favor, insira um CPF para pesquisar.");
                return;
            }

            FuncionariosDAO dao = new FuncionariosDAO();
            Funcionarios funcionario = dao.buscaFuncionarioPorCpf(cpf);

            // Verifica se o funcionário foi encontrado
            if (funcionario != null) {
                // Preenche os campos do formulário com os dados do funcionário encontrado
                txtcodigo.setText(String.valueOf(funcionario.getId()));
                txtnome.setText(funcionario.getNome());
                txtcpf.setText(funcionario.getCpf());
                txttelefone.setText(funcionario.getTelefone());
                txtendereco.setText(funcionario.getEndereco());
                txtnumero.setText(String.valueOf(funcionario.getNumero()));
                txtbairro.setText(funcionario.getBairro());
                txtcep.setText(funcionario.getCep());
                txtusuario.setText(funcionario.getCargo()); // Preenche o campo de cargo
                cbacesso.setSelectedItem(funcionario.getNivelAcesso());
                txtsenha.setText(funcionario.getSenha()); // Preenche o campo de senha
                // Seleciona o nível de acesso no ComboBox

            } else {
                JOptionPane.showMessageDialog(null, "Funcionário não encontrado.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao buscar funcionário: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro inesperado: " + e.getMessage());
        }


    }                                              

    private void btnpesquisatelefoneActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // Botao pesquisa Telefone

        // Botão Pesquisar por Telefone
        try {
            String telefone = txttelefone.getText();

            // Verifica se o campo Telefone está vazio
            if (telefone.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Por favor, insira um telefone para pesquisar.");
                return;
            }

            FuncionariosDAO dao = new FuncionariosDAO();
            Funcionarios funcionario = dao.buscaFuncionarioPorTelefone(telefone);

            // Verifica se o funcionário foi encontrado
            if (funcionario != null) {
                // Preenche os campos do formulário com os dados do funcionário encontrado
                txtcodigo.setText(String.valueOf(funcionario.getId()));
                txtnome.setText(funcionario.getNome());
                txtcpf.setText(funcionario.getCpf());
                txttelefone.setText(funcionario.getTelefone());
                txtendereco.setText(funcionario.getEndereco());
                txtnumero.setText(String.valueOf(funcionario.getNumero()));
                txtbairro.setText(funcionario.getBairro());
                txtcep.setText(funcionario.getCep());
                txtusuario.setText(funcionario.getCargo()); // Preenche o campo de cargo
                cbacesso.setSelectedItem(funcionario.getNivelAcesso()); // Seleciona o nível de acesso no ComboBox
                txtsenha.setText(funcionario.getSenha()); // Preenche o campo de senha
            } else {
                JOptionPane.showMessageDialog(null, "Funcionário não encontrado.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao buscar funcionário: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro inesperado: " + e.getMessage());
        }


    }                                                   

    private void btnpesquisanomeKeyPressed(java.awt.event.KeyEvent evt) {                                           
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnpesquisanome.doClick(); // Simula o clique no botão btnpesquisar
        }
    }                                          

    private void btnpesquisacpfKeyPressed(java.awt.event.KeyEvent evt) {                                          
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnpesquisacpf.doClick(); // Simula o clique no botão btnpesquisar
        }
    }                                         

    private void btnpesquisatelefoneKeyPressed(java.awt.event.KeyEvent evt) {                                               
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnpesquisatelefone.doClick(); // Simula o clique no botão btnpesquisar
        }
    }                                              

    private void txtnomeKeyPressed(java.awt.event.KeyEvent evt) {                                   
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnpesquisanome.doClick(); // Simula o clique no botão btnpesquisar
        }
    }                                  

    private void txtcpfKeyPressed(java.awt.event.KeyEvent evt) {                                  
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnpesquisacpf.doClick(); // Simula o clique no botão btnpesquisar
        }
    }                                 

    private void txttelefoneKeyPressed(java.awt.event.KeyEvent evt) {                                       
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnpesquisatelefone.doClick(); // Simula o clique no botão btnpesquisar
        }
    }                                      

    private void btnsalvarKeyPressed(java.awt.event.KeyEvent evt) {                                     
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnsalvar.doClick(); // Simula o clique no botão btnpesquisar
        }
    }                                    

    private void btneditarKeyPressed(java.awt.event.KeyEvent evt) {                                     
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btneditar.doClick(); // Simula o clique no botão btnpesquisar
        }
    }                                    

    private void btnexcluirKeyPressed(java.awt.event.KeyEvent evt) {                                      
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnexcluir.doClick(); // Simula o clique no botão btnpesquisar
        }
    }                                     

    private void formWindowActivated(java.awt.event.WindowEvent evt) {                                     
        // TODO add your handling code here:
        listar();
    }                                    

    private void tabelafuncionariosKeyPressed(java.awt.event.KeyEvent evt) {                                              
        // tabela pesquisa
        int linhaSelecionada = tabelafuncionarios.getSelectedRow();

// Verifica se há uma linha selecionada
        if (linhaSelecionada >= 0) {
            // Preenche os campos de texto com os valores da linha selecionada
            txtcodigo.setText(tabelafuncionarios.getValueAt(linhaSelecionada, 0).toString());
            txtnome.setText(tabelafuncionarios.getValueAt(linhaSelecionada, 1).toString());
            txtcpf.setText(tabelafuncionarios.getValueAt(linhaSelecionada, 2).toString());
            txttelefone.setText(tabelafuncionarios.getValueAt(linhaSelecionada, 3).toString());
            txtendereco.setText(tabelafuncionarios.getValueAt(linhaSelecionada, 4).toString());
            txtnumero.setText(tabelafuncionarios.getValueAt(linhaSelecionada, 5).toString());
            txtbairro.setText(tabelafuncionarios.getValueAt(linhaSelecionada, 6).toString());
            txtcep.setText(tabelafuncionarios.getValueAt(linhaSelecionada, 7).toString());
            txtusuario.setText(tabelafuncionarios.getValueAt(linhaSelecionada, 8).toString()); // Preenche o campo de cargo
            cbacesso.setSelectedItem(tabelafuncionarios.getValueAt(linhaSelecionada, 9).toString()); // Seleciona o nível de acesso no ComboBox
            txtsenha.setText(tabelafuncionarios.getValueAt(linhaSelecionada, 10).toString()); // Preenche o campo de senha
        }

    }                                             

    private void txtnome1KeyPressed(java.awt.event.KeyEvent evt) {                                    
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnpesquisar.doClick(); // Simula o clique no botão btnpesquisar
        }
    }                                   

    private void btnpesquisarActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // Botao pesquisa na tabela

        try {
            String nome = txtnome1.getText();
            System.out.println("Nome digitado: " + nome); // Debug: Verifica o nome digitado

            if (nome.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Por favor, insira um nome para pesquisar.");
                return;
            }

            // Adiciona os caracteres % para fazer a busca com LIKE no SQL
            nome = "%" + nome + "%";
            System.out.println("Nome formatado para SQL: " + nome); // Debug: Verifica o nome formatado para SQL

            FuncionariosDAO dao = new FuncionariosDAO();
            List<Funcionarios> lista = dao.buscarListaPorNome(nome);
            System.out.println("Funcionários encontrados: " + lista.size()); // Debug: Verifica quantos funcionários foram encontrados

            DefaultTableModel dados = (DefaultTableModel) tabelafuncionarios.getModel();
            dados.setNumRows(0); // Limpa a tabela

            // Preenche a tabela com os dados encontrados
            for (Funcionarios f : lista) {
                System.out.println("Adicionando funcionário à tabela: " + f.getNome()); // Debug: Verifica o funcionário que está sendo adicionado
                dados.addRow(new Object[]{
                    f.getId(),
                    f.getNome(),
                    f.getCpf(),
                    f.getTelefone(),
                    f.getEndereco(),
                    f.getNumero(),
                    f.getBairro(),
                    f.getCep(),
                    f.getCargo(), // Adiciona o cargo
                    f.getNivelAcesso(), // Adiciona o nível de acesso
                    f.getSenha() // Adiciona a senha
                });
            }

            if (lista.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Nenhum funcionário encontrado com o nome informado.");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao realizar a pesquisa: " + e.getMessage());
            e.printStackTrace(); // Exibe o erro no console para depuração
        }


    }                                            

    private void btnpesquisarKeyPressed(java.awt.event.KeyEvent evt) {                                        
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnpesquisar.doClick(); // Simula o clique no botão btnpesquisar
        }
    }                                       

    private void tabelafuncionariosMouseClicked(java.awt.event.MouseEvent evt) {                                                
        // TODO add your handling code here:
// if (tabelaclientes.getSelectedRow() != -1) {
//        // Obtém o índice da linha selecionada
//        int rowIndex = tabelaclientes.getSelectedRow();
//
//        // Obtém os valores da linha selecionada
//        Object codigo = tabelaclientes.getValueAt(rowIndex, 0);
//        Object nome = tabelaclientes.getValueAt(rowIndex, 1);
//        Object cpf = tabelaclientes.getValueAt(rowIndex, 2);
//        Object telefone = tabelaclientes.getValueAt(rowIndex, 3);
//        Object endereco = tabelaclientes.getValueAt(rowIndex, 4);
//        Object numero = tabelaclientes.getValueAt(rowIndex, 5);
//        Object bairro = tabelaclientes.getValueAt(rowIndex, 6);
//        Object cep = tabelaclientes.getValueAt(rowIndex, 7);
//
//        // Define os valores nos campos de texto
//        txtcodigo.setText(codigo != null ? codigo.toString() : "");
//        txtnome.setText(nome != null ? nome.toString() : "");
//        txtcpf.setText(cpf != null ? cpf.toString() : "");
//        txttelefone.setText(telefone != null ? telefone.toString() : "");
//        txtendereco.setText(endereco != null ? endereco.toString() : "");
//        txtnumero.setText(numero != null ? numero.toString() : "");
//        txtbairro.setText(bairro != null ? bairro.toString() : "");
//        txtcep.setText(cep != null ? cep.toString() : "");
//    }

        // Definindo o índice selecionado na tabela
        tabeladadosformulario.setSelectedIndex(0);

// Preenchendo os campos de texto com os valores da linha selecionada
        txtcodigo.setText(tabelafuncionarios.getValueAt(tabelafuncionarios.getSelectedRow(), 0).toString());
        txtnome.setText(tabelafuncionarios.getValueAt(tabelafuncionarios.getSelectedRow(), 1).toString());
        txtcpf.setText(tabelafuncionarios.getValueAt(tabelafuncionarios.getSelectedRow(), 2).toString());
        txttelefone.setText(tabelafuncionarios.getValueAt(tabelafuncionarios.getSelectedRow(), 3).toString());
        txtendereco.setText(tabelafuncionarios.getValueAt(tabelafuncionarios.getSelectedRow(), 4).toString());
        txtnumero.setText(tabelafuncionarios.getValueAt(tabelafuncionarios.getSelectedRow(), 5).toString());
        txtbairro.setText(tabelafuncionarios.getValueAt(tabelafuncionarios.getSelectedRow(), 6).toString());
        txtcep.setText(tabelafuncionarios.getValueAt(tabelafuncionarios.getSelectedRow(), 7).toString());

// Adicionando os campos faltantes
        txtusuario.setText(tabelafuncionarios.getValueAt(tabelafuncionarios.getSelectedRow(), 8).toString());
        cbacesso.setSelectedItem(tabelafuncionarios.getValueAt(tabelafuncionarios.getSelectedRow(), 9).toString());
        txtsenha.setText(tabelafuncionarios.getValueAt(tabelafuncionarios.getSelectedRow(), 10).toString());


    }                                               

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmFuncionarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btneditar;
    private javax.swing.JButton btnexcluir;
    private javax.swing.JButton btnpesquisacpf;
    private javax.swing.JButton btnpesquisanome;
    private javax.swing.JButton btnpesquisar;
    private javax.swing.JButton btnpesquisatelefone;
    private javax.swing.JButton btnsalvar;
    public javax.swing.JComboBox<String> cbacesso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane tabeladadosformulario;
    private javax.swing.JPanel tabeladadospessoais;
    private javax.swing.JTable tabelafuncionarios;
    private javax.swing.JTextField txtbairro;
    private javax.swing.JFormattedTextField txtcep;
    private javax.swing.JTextField txtcodigo;
    private javax.swing.JFormattedTextField txtcpf;
    private javax.swing.JTextField txtendereco;
    private javax.swing.JTextField txtnome;
    private javax.swing.JTextField txtnome1;
    private javax.swing.JTextField txtnumero;
    public javax.swing.JPasswordField txtsenha;
    private javax.swing.JFormattedTextField txttelefone;
    public javax.swing.JTextField txtusuario;
    // End of variables declaration                   
}
